
---
# Source: web-app/templates/vaultinject.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "test-vaultinject"
  namespace: "default"
---
# Source: web-app/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "test"
  namespace: "default"
data:
  SOME_ENV: 'value'
---
# Source: web-app/templates/Service.yaml
apiVersion: v1
kind: Service

metadata:
  name: "test"
  namespace: "default"

spec:
  selector:
    app: "test"

  ports:
    - port: 80
      targetPort: 8000
---
# Source: web-app/templates/Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "test"
  namespace: "default"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "test"
      namespace: "default"
  template:
    metadata:
      labels:
        app: "test"
        namespace: "default"
      annotations:
                
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/role: "test-vaultinject"
        
        vault.hashicorp.com/agent-inject-secret-0: secrets/secrets-path
        vault.hashicorp.com/secret-volume-path-0: "/secrets"
        vault.hashicorp.com/agent-inject-command-0: "cat /secrets/0 | sh --"
        vault.hashicorp.com/agent-inject-template-0: |
          {{- with secret "secrets/data/secrets-path" -}}
          {{- range $k, $v := .Data.data }}
          echo {{ $v }} > /secrets/{{ $k }}
          {{- end }}{{ end }}
          rm /secrets/0
        
    spec:
            
      serviceAccountName: "test-vaultinject"
      containers:
        - name: "test"
          image: "k3d-registry/web-app:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          envFrom:  
                        
            - configMapRef:
                name: "test"
---
# Source: web-app/templates/IngressRoute.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute

metadata:
  name: "test"
  namespace: "default"

spec:
  entryPoints:
    - "web"

  routes:
    - kind: Rule
      match: Host(`web-app-host`)

      services:
        - name: "test"
          port: 80
---
# Source: web-app/templates/vaultinject.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "test-vaultinject"
  namespace: "default"
---
# Source: web-app/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "test"
  namespace: "default"
data:
  SOME_ENV: 'value'
---
# Source: web-app/templates/Service.yaml
apiVersion: v1
kind: Service

metadata:
  name: "test"
  namespace: "default"

spec:
  selector:
    app: "test"

  ports:
    - port: 80
      targetPort: 8000
---
# Source: web-app/templates/Deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "test"
  namespace: "default"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "test"
      namespace: "default"
  template:
    metadata:
      labels:
        app: "test"
        namespace: "default"
      annotations:
                
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-status: "update"
        vault.hashicorp.com/role: "test-vaultinject"
        
        vault.hashicorp.com/agent-inject-secret-0: secrets/secrets-path
        vault.hashicorp.com/secret-volume-path-0: "/secrets"
        vault.hashicorp.com/agent-inject-command-0: "cat /secrets/0 | sh --"
        vault.hashicorp.com/agent-inject-template-0: |
          {{- with secret "secrets/data/secrets-path" -}}
          {{- range $k, $v := .Data.data }}
          echo {{ $v }} > /secrets/{{ $k }}
          {{- end }}{{ end }}
          rm /secrets/0
        
    spec:
            
      serviceAccountName: "test-vaultinject"
      containers:
        - name: "test"
          image: "k3d-registry/web-app:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          envFrom:  
                        
            - configMapRef:
                name: "test"
---
# Source: web-app/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "test"
  namespace: "default"
data:
  SOME_ENV: 'value'
---
# Source: web-app/templates/Service.yaml
apiVersion: v1
kind: Service

metadata:
  name: "test"
  namespace: "default"

spec:
  selector:
    app: "test"

  ports:
    - port: 80
      targetPort: 8000
---
# Source: web-app/templates/Deployment.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "test"
  namespace: "default"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "test"
      namespace: "default"
  template:
    metadata:
      labels:
        app: "test"
        namespace: "default"
      annotations:
                
    spec:
            
      containers:
        - name: "test"
          image: "k3d-registry/web-app:latest"
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
          envFrom:  
                        
            - configMapRef:
                name: "test"
          volumeMounts:
          - name: data
            mountPath: /data/dir
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Mi
